<?php

define('CASHBOX_WILDCARD_ALL', '  all  ');
define('CASHBOX_WILDCARD_OVERVIEW', '  overview  ');
/**
 * Implements hook_permission().
 */
function cashbox_permission() {
	return array(
		'view cashbox own_balance' => array(
			'title' => t('View own balance'),
			'description' => t('Allow user to view own balance'),
		),
		'view cashbox other_balances' => array(
			'title' => t('View other users\' transactions'),
			'description' => t('Allow user to view other users\' balances and transactions'),
			'restrict access' => true,
		),
		'view cashbox all_balances' => array(
			'title' => t('View all transactions'),
			'description' => t('Allow user to view all balances (i.e. master overview)'),
			'restrict access' => true,
		),
		'transfer cashbox own_balance' => array(
			'title' => t('Transfer own funds'),
			'description' => t('User may transfer own funds'),
		),
		'transfer cashbox other_balances' => array(
			'title' => t('Allow user to transfer other users\' funds'),
			'restrict access' => true,
		),
		'transfer cashbox may_overdraw' => array(
			'title' => t('Allow overdraw'),
			'description' => t('Allow user to overdraw the account'),
		),
		'transfer cashbox may_transaction' => array(
			'title' => t('Exceed transaction limit'),
			'description' => t('Allow user to over the default transaction limit'),
		),
		'adjust cashbox' => array(
			'title' => t('Adjust own account'),
			'description' => t('Allow user adjustment of own account'),
			'restrict access' => true,
		),
	);
}
		
/**
 * Implements hook_menu()
 */
function cashbox_menu() {
	global $user;
	$items = array();

	$items['admin/config/cashbox'] = array(
		'title'	=> 'Cashbox Admin',
		'description' => 'Configure Cashbox',
		'access arguments' => array('access administration pages'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('cashbox_admin'),
		'type' => MENU_NORMAL_ITEM,
		'file' => 'cashbox.admin.inc',
	);
 	$items['cashbox/callback/%user_uid_optional'] = array(
		'title'		=> 'Account statement AJAX Callback',
		'page callback'	=> '_cashbox_user_display_callback',
		'page arguments' => array(2),
		'access callback' => '_cashbox_check_access',
		'access arguments' => array(2, 'cashbox'),
		'type' 		=> MENU_CALLBACK,
	);
	$items['cashbox/callback/transfer_autocomplete'] = array(
		'title'		=> 'AJAX Autocomplete Callback for transfers',
		'page callback'	=> '_cashbox_autocomplete_callback',
		'access arguments' => array('access user profiles'),
		'type'		=> MENU_CALLBACK,
	);
	$items['cashbox/callback/books/%'] = array(
		'title'		=> 'AJAX Callback for Account-Journals',
		'page callback' => '_cashbox_books_callback',
		'page arguments' => array(3),
		'access arguments' => array('view cashbox other_balances'),
		'type'		=> MENU_CALLBACK,
	);
	$items['cashbox'] = array(
		'title' => 'Cashbox',
		'page callback' => 'cashbox_user_display',
		'page arguments' => array(false),
		'access arguments' => array('view cashbox own_balance'),
		'menu_name' => 'user-menu',
		'type' => MENU_NORMAL_ITEM,
	);
	$items['cashbox/my_balance'] = array(
		'title' => 'Account Statement',
		'page callback' => 'cashbox_user_display',
		'page arguments' => array(false),
		'access arguments' => array('view cashbox own_balance'),
		'type' => MENU_DEFAULT_LOCAL_TASK | MENU_NORMAL_ITEM,
		'parent' => 'cashbox',
		'weight' => -10,
	);
	$items['cashbox/accounts'] = array(
		'title'		=> 'Account Journal',
		'description'	=> 'Display other accounts',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('cashbox_display_all'),
		'access arguments' => array('view cashbox other_balances'),
		'weight'	=> 10,
		'type'		=> MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
	);
	$items['cashbox/display/%user'] = array(
		'title' => 'Account Statement',
		'page callback' => 'cashbox_user_display',
		'page arguments' => array(2),
		'access callback' => '_cashbox_check_access',
		'access arguments' => array(2,1), // permission
		'type' => MENU_CALLBACK,
	);
 	$items['cashbox/transfer'] = array(
		'title'		=> 'Transfer funds',
		'page callback'	=> 'drupal_get_form',
		'page arguments' => array('cashbox_transfer'),
		'access arguments' => array('transfer cashbox own_balance'),
		'file'		=> 'cashbox.transfer.inc',
		'type'	=> MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
	);
	$items['cashbox/confirm/%/%'] = array(
		'title'		=> 'Transaction Confirmation',
		'page callback'	=> '_cashbox_transfer_confirm',
		'page arguments' => array(2, 3),
		'access arguments' => array('transfer cashbox own_balance'),
		'file'		=> 'cashbox.transfer.inc',
		'type'		=> MENU_CALLBACK,
	);
	$items['cashbox/adjust'] = array(
		'title'		=> 'Adjust account',
		'page callback'	=> 'drupal_get_form',
		'page arguments' => array('cashbox_adjust'),
		'access arguments' => array('adjust cashbox'),
		'file'		=> 'cashbox.transfer.inc',
		'type'	=> MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
	);
 
	return $items;
}

function cuser_to_arg($cuser) {
	var_dump($cuser);
#	return user_load($cuser)->uid;
}
 
function _cashbox_get_transaction_terms() {
	$tree = taxonomy_get_tree(variable_get('cashbox_transaction_taxonomy'));

	if (empty($tree))
		return array();

	$terms = array();
	foreach ($tree as $term)
		$terms[$term->tid] = $term->name . ' (' . $term->description . ')';

	return $terms;


}

/**
 * AJAX-Callback returning usernames and (if enabled) Master Accounts
 * 
 * @param string
 * 	Username-Fragment
 */
function _cashbox_autocomplete_callback($string = '') {
	$matches = array();
	if (module_exists('cb_master')) {
		if ($string) {
			$result = db_select('cashbox_masters')->fields('cashbox_masters', array('account_name'))->condition('account_name', db_like($string) . '%', 'LIKE')->range(0, 10)->execute();
			foreach ($result as $master) {
				$matches[$master->account_name] = '<strong>' . check_plain($master->account_name) . '</strong>';
			}
		}
	}
	if ($string) {
		$result = db_select('users')->fields('users', array('name'))->condition('name', db_like($string) . '%', 'LIKE')->range(0, 10)->execute();
		foreach ($result as $user) {
			$matches[$user->name] = check_plain($user->name);
		}
	}

	drupal_json_output($matches);
}

class cbHeader {
	public $tid;
	public $timestamp;
	public $credited;
	public $debited;
	public $tag;
	public $amount;
	public $balance_creditee;
	public $balance_debitee;
	public $balance_user;
	public $text;
	public $checksum;

	public function __construct($tid = true, 
			$timestamp = true, 
			$credited = false, 
			$debited = false, 
			$tag = true, 
			$amount = true, 
			$text = true, 
			$balance_creditee = false, 
			$balance_debitee = false, 
			$balance_user = true, 
			$checksum = true) 
	{
		$this->tid 		= $tid;
		$this->timestamp 	= $timestamp;
		$this->credited 	= $credited;
		$this->debited 		= $debited;
		$this->tag		= $tag;
		$this->amount		= $amount;
		$this->balance_creditee	= $balance_creditee;
		$this->balance_debitee	= $balance_debitee;
		$this->balance_user	= $balance_user;
		$this->text		= $text;
		$this->checksum		= $checksum;
	}

	public function getHeader() {
		$header = array();
		if ($this->tid)		$header['tid'] 		= array('data' => '#', 'field' => 'tid', 'sort' => 'asc');
		if ($this->timestamp)	$header['timestamp']	= array('data' => t('Timestamp'), 'field' => 'timestamp', 'sort' => 'desc');
		if ($this->tag)		$header['tag']		= array('data' => t('Type'), 'field' => 'tag', 'sort' => 'asc');
		if ($this->debited)	$header['debited']	= array('data' => t('Debitor'));
		if ($this->credited)	$header['credited']	= array('data' => t('Creditor'));
		if ($this->text)	$header['text']		= array('data' => t('Text'));
		if ($this->amount)	$header['amount']	= array('data' => t('Amount'));
		if ($this->balance_debitee)  $header['balance_debited']  = array('data' => t('Balance<br />Debitor'));
		if ($this->balance_creditee) $header['balance_credited'] = array('data' => t('Balance<br />Creditor'));
		if ($this->balance_user) $header['balance']	= array('data' => t('New Balance'));
		if ($this->checksum)	$header['checksum']	= array('data' => t('Checksum'));

		return $header;
	}
}

function _cashbox_format_transaction(&$transaction, &$header, &$user = false) {
	$cell = array();
	if ($header->tid)		$cell['tid'] 		= $transaction->tid;
	if ($header->timestamp)		$cell['timestamp'] 	= array('data' => format_date($transaction->timestamp, 'short'), 'class' => 'cashbox_date');
	if ($header->tag)		$cell['tag'] 		= array('data' => taxonomy_term_load($transaction->tag)->name, 'title' => taxonomy_term_load($transaction->tag)->description);
	if ($header->debited)		$cell['debited'] 	= $transaction->debited;
	if ($header->credited)		$cell['credited']	= $transaction->credited;
	$cell['text'] = '';
	if ($header->balance_user) {
		if ($transaction->credited == $user->name && !empty($transaction->debited))
			$cell['text']	= t('From') . ' ' . $transaction->debited . '<br />';
		else if ($transaction->debited == $user->name && !empty($transaction->credited))
			$cell['text'] 	= $cell['text'] . t('To') . ' ' . $transaction->credited . '<br />';
	}
	if (!empty($transaction->initiated) && $header->text) 
					$cell['text']		= $cell['text'] . t('By') . ' ' . $transaction->initiated . (!empty($transaction->message) ? '<br />' : ''); 
	if ($header->text)		$cell['text']		= $cell['text'] . $transaction->message;
	if ($header->amount)		$cell['amount']		= array('data' => '<div class="cashbox_symbol">' . variable_get('cashbox_symbol', '$') . '</div><div class="cashbox_amount">' .
										($user->name != CASHBOX_WILDCARD_ALL ? ($transaction->debited == $user->name ? '-' : '+') : '') . ' ' . 
										number_format($transaction->amount, 2, variable_get('cashbox_decimal', '.'), variable_get('cashbox_thousand', ',')) .
										'</div>',
									'class' => $user->name != CASHBOX_WILDCARD_ALL ? ($transaction->debited == $user->name ? 'cashbox_debit' : 'cashbox_credit') : '');
	if ($header->balance_debitee) {
		if (empty($transaction->debited))
			$cell['balance_debitee'] = '---';
		else
			$cell['balance_debitee'] = '<div class="cashbox_symbol">' . variable_get('cashbox_symbol', '$') . '</div><div class="cashbox_amount">' .  number_format($transaction->balance_debitee, 2, variable_get('cashbox_decimal', '.'), variable_get('cashbox_thousand', ',')) .  '</div>';
	}
	if ($header->balance_creditee)	{
		if (empty($transaction->credited))
			$cell['balance_creditee'] = '---';
		else 
			$cell['balance_creditee'] = '<div class="cashbox_symbol">' . variable_get('cashbox_symbol', '$') . '</div><div class="cashbox_amount">' .  number_format($transaction->balance_creditee, 2, variable_get('cashbox_decimal', '.'), variable_get('cashbox_thousand', ',')) .  '</div>';
	}
	if ($header->balance_user) 
			$cell['balance'] = '<div class="cashbox_symbol">' . variable_get('cashbox_symbol', '$') . '</div><div class="cashbox_amount">' .
									number_format(($transaction->debited == $user->name) ? $transaction->balance_debitee : $transaction->balance_creditee, 2, variable_get('cashbox_decimal', '.'), variable_get('cashbox_thousand', ',')) .
									'</div>';
	if ($header->checksum) {
		if (_cashbox_checksum($transaction->credited,  $transaction->debited, $transaction->initiated, $transaction->timestamp,  $transaction->message, $transaction->amount) == $transaction->token)
			if (!variable_get('cashbox_qr', 0)) $cell['checksum']	= 'OK';
			else 		$cell['token'] = '<span class="cashbox_qr">' . theme('mobilecode', array('data' => $base_url . 'cashbox/confirm/' . $user->name . '/' . $transaction->token, 'attributes' =>array('#provider' => 'internal', '#preset' => 'large'), 'image_alt' => $transaction->token, 'image_title' => $transaction->token, 'image_attributes' => array('width' => 80, 'height' => 80, 'class' => 'cashbox_qr'))) . '</span>';
		else {
			$cell['checksum']	= 'CHECKSUM MISMATCH! (This is bad!!!)';
			drupal_set_message(t('One of your transactions (Nr. @tid) shows a checksum-mismatch. Please contact your Administrator ASAP', array('@tid' => $transaction->tid)), 'warning', true);
		}
		$cell['checksum'] .= '<span class="cashbox_checksum"> ' . $transaction->token . '</span>';
	}


	return $cell;

}

/**
 * Ajax-Callback function for the statement-page(r)
 *
 * @param uid
 * 	UserID parsed by drupal (neat, huh?)
 */
function _cashbox_user_display_callback($user) {
	header("Content-type: text/html");
	header("Expires: Wed, 29 Jan 1975 04:15:00 GMT");
	header("Last-Modified: " . gmdate("D, d M Y H:i:s") . " GMT");
	header("Cache-Control: no-cache, must-revalidate");
	header("Pragma: no-cache");

	if ($user->name == CASHBOX_WILDCARD_ALL)
		$header = new cbHeader(true, true, true, true, true, true, true, true, true, false, true);
	else
		$header = new cbHeader();

	$rows = array();

	$transactions = _cashbox_fetch($user->name, variable_get('cashbox_perPage', 25), $header);
	
	foreach ($transactions as $transaction)
		$rows[$transaction->tid] = _cashbox_format_transaction($transaction, $header, $user);
 
	$html = theme('table',  array(
		'header'        => $header->getHeader(),
		'empty'         => t('No transactions available'),
		'rows'          => $rows,
		'sticky'        => true,
		'attributes'	=> array('class' => array('cashbox_table')),
	));

	$html .= theme('pager', array('tags' => array()));

	die($html);
}

/**
 * Calculate the friggin transaction-token
 */
function _cashbox_checksum($credited, $debited, $initiated, $timestamp, $message, $amount) {
#	error_log('Doing Checksum, raw: ' . $credited. '>' . $debited . '%' . $initiated . '@' . $timestamp . ':' . $message . '&' . $amount . ' -> ' . md5($credited. '>' . $debited . '%' . $initiated . '@' . $timestamp . ':' . $message . '&' . $amount));
	return md5($credited. '>' . $debited . '%' . $initiated . '@' . $timestamp . ':' . $message . '&' . $amount);
}

/**
 * Regenerate Checksums (i.e. after a Username was changed)
 *
 */
function _cashbox_rebuild_checksum($tid, $signed = false) {
	$data_in = db_select('cashbox', 'c')->fields('c', array('credited', 'debited', 'initiated', 'timestamp', 'amount', 'message'))->condition('tid', $tid)->execute()->fetchAssoc();
	return db_update('cashbox')->fields(array('token' => _cashbox_checksum($data_in['credited'], $data_in['debited'], $data_in['initiated'], $data_in['timestamp'], $data_in['message'], $data_in['amount'])))->condition('tid', $tid)->execute();
}

/** 
 * Return a unified header
 */
function _cashbox_get_header($account = false, $balance = false, $token = false) {
	$header = array();
	$header['tid'] = array('data' => '#', 'field' => 'tid', 'sort' => 'asc');
	$header['timestamp'] 	= array('data' => t('Timestamp'), 'field' => 'timestamp', 'sort' => 'desc');
	
	if ($account)
		$header['debited'] = array('data' => t('Account'), 'field' => 'debited');

	$header['transaction']	= array('data' => t('Transaction'),);
	$header['amount']	= array('data' => t('Amount'),);
	
	if ($balance)
		$header['balance']	= array('data' => t('New balance'),);
	if ($token)
		$header['token']	= array('data' => t('Checksum'),);

	return $header;
}

/**
 * Retrieves master-account / user-account data; Master-Account overrides user!
 */
function _cashbox_fetch_data(&$name) {
	if (module_exists('cb_master')) {
		if (cb_master_is_master($name))
			return new cbMaster($name);
		}

	if (is_int($name))
		return user_load($name);
	else
		return user_load_by_name($name);
}


/**
 * check permissions for various menu entries (helper function)
 *
 * @param account
 * 	The the user tries to execute
 */
function _cashbox_check_access($account = 0, $action = '') {
	global $user; /* Get own user-data */

	if (!$account)
		$account = &$user;
	
	switch ($action) {
	case 'cashbox':
		return ($user->uid == $account->uid && user_access('view cashbox own_balance')) ||		/* Users may always view their own balance */
			user_access('view cashbox other_balances');
	case 'transfer':
		return user_access('transfer cashbox own_balance') || user_access('transfer cashbox other_balance');
	default:
		return user_access('view cashbox own_balance');
	}

	return false;
}

/** 
 * Fetch user transactions
 *
 * @param uid
 * 	Valid user-id
 * @param limit 
 * 	Fetches only the last N entries
 * 	default is set in the settings,
 * 	if limit = 0 all entries are fetched
 *
 */
function _cashbox_fetch($username, $limit, &$header = false) {
	if ($username == CASHBOX_WILDCARD_ALL) {
	       if (!user_access('view cashbox all_balances'))
			return;
	       else
		       $username = '%';
	}


	$query = db_select('cashbox', 'c');
	if ($limit != 0)
		$query->extend('PagerDefault')->limit($limit);
	if ($header != false)
		$query->extend('TableSort')->orderByHeader($header->getHeader());
	
        $query->condition(db_or()->condition('credited', $username, ($username == '%') ? 'LIKE' : '=')->condition('debited', $username, ($username == '%') ? 'LIKE' : '='));

	if ($header->tid) 	$query->addField('c', 'tid');
	if ($header->timestamp)   $query->addField('c', 'timestamp');
	if ($header->tag)         $query->addField('c', 'tag');
	if ($header->text)        $query->addField('c', 'message');
	if ($header->amount)      $query->addField('c', 'amount');
	if ($header->balance_debitee || $header->balance_user) $query->addField('c', 'balance_debitee'); 
	if ($header->balance_creditee || $header->balance_user) $query->addField('c', 'balance_creditee');
	if ($header->checksum)	$query->addField('c', 'token');

	$query->fields('c', array('initiated', 'credited', 'debited'));

	return $query->execute()->fetchAll();
}

/**
 * Show user-balances
 *
 * @param argbox
 * 	Takes a user-object as argument
 */
function cashbox_user_display($argbox = false) {
	global $user;
	if (!$argbox) // If no argument is passed, it's the users own statement
		$argbox = &$user;

	drupal_add_js(drupal_get_path('module', 'cashbox') . '/jquery.url.js', array('weight' => 4));
        drupal_add_js(drupal_get_path('module', 'cashbox') . '/cashbox.callback.js', array('weight' => 5));
	drupal_add_js('initializeTable(' . $argbox->uid . ');', array('type' => 'inline', 'weight' => 6));
	drupal_add_css(drupal_get_path('module', 'cashbox') . '/cashbox_print.css', array('media' => 'print'));
	drupal_add_css(drupal_get_path('module', 'cashbox') . '/cashbox.css');

	$page_array['cashbox_arguments'] = array(
		'#markup' => t('This is @user balance sheet', array('@user' => ($argbox->uid == $user->uid ? t('your') : $argbox->name . '\'s'))) . '<div id="table-container"></div>',
	);
 	return $page_array;
}

/**
 * Displays all transactions of a selected user
 * callback-function for drupal_get_form
 */
function cashbox_display_all($form, &$form_state) {
	global $user;

	/** Make stuff pretty */
	drupal_add_js(drupal_get_path('module', 'cashbox') . '/jquery.url.js');
        drupal_add_css(drupal_get_path('module', 'cashbox') . '/cashbox.css');
	drupal_add_css(drupal_get_path('module', 'cashbox') . '/cashbox_print.css', array('media' => 'print'));
	drupal_add_js(drupal_get_path('module', 'cashbox') . '/cb_books_callback.js');

	$available_accs = array(0 => '--- ' . t('Select Account') . ' ---');

	if (user_access('view cashbox all_balances')) 
		$available_accs[t('Overview')] = array(CASHBOX_WILDCARD_OVERVIEW => t('Display all balances'), CASHBOX_WILDCARD_ALL => t('Display all transactions'));

	/** Get a list of Master Accounts available to this user */
	if (module_exists('cb_master')) {
		foreach (cb_master_get_available_accs($user) as $id => $master)
			$available_accs[t('Master Accounts')][$id] = $master['name'] .  "\t (" . variable_get('cashbox_symbol', '$') . ' ' .  number_format($master['balance'], 2, variable_get('cashbox_decimal', '.'), variable_get('cashbox_thousand', ',')) . ')';
	}

	/** Get a list of users that made transactions (note to self: MySQL is a bitch!!!) **/
	$query = db_query('SELECT DISTINCT cashbox.credited AS user FROM cashbox WHERE credited not IN (SELECT account_name FROM cashbox_masters) UNION SELECT DISTINCT cashbox.debited AS user FROM cashbox WHERE debited not IN (SELECT account_name FROM cashbox_masters)');
	while ($row = $query->fetchAssoc()) {
		$available_accs[t('User Accounts')][$row['user']] = $row['user'] . "\t (" . variable_get('cashbox_symbol', '$') . ' ' . number_format(_cashbox_get_current_balance($row['user']), 2, variable_get('cashbox_decimal', '.'), variable_get('cashbox_thousand', ',')) . ')';
	}


	$form['selector'] = array(
		'#type'		=> 'select',
		'#options' 	=> $available_accs,
		'#attributes'   => array('class' => array('cashbox_qr'), 'onchange' => 'initializeTableMaster(this.value)'),
	);
	$form['books_display'] = array(
		'#type'         => 'markup',
		'#markup'       => '<div id="books_display-div"> </div>',
	);

	return $form;
}

function _cashbox_format_amount($amount) {
	return variable_get('cashbox_symbol', '$') . ' ' . number_format($amount, 2, variable_get('cashbox_decimal', '.'), variable_get('cashbox_thousand', ','));
}
/**
 * Callback that triggers _cashbox_user_display_callback depending on passed argument
 */
function _cashbox_books_callback($arg) {
	header("Content-type: text/html");
        header("Expires: Wed, 29 Jan 1975 04:15:00 GMT");
	header("Last-Modified: " . gmdate("D, d M Y H:i:s") . " GMT");
        header("Cache-Control: no-cache, must-revalidate");
        header("Pragma: no-cache");

	if ($arg == CASHBOX_WILDCARD_ALL && !user_access('view cashbox all_balances'))
			return;
	if ($arg == CASHBOX_WILDCARD_OVERVIEW) {
	       if (!user_access('view cashbox all_balances'))
			return;


		$query = db_query('SELECT DISTINCT cashbox.credited AS user FROM cashbox WHERE credited IS NOT NULL ' .
		       'UNION SELECT DISTINCT cashbox.debited AS user FROM cashbox WHERE debited IS NOT NULL');
		$rows = array();
	       $balance = 0;
	       $balance_credits = $balance_debits = 0;
		while ($row = $query->fetchAssoc()) {
			$balance = _cashbox_get_current_balance($row['user']);
			if ($balance > 0) 	$balance_credits += $balance;
			else if ($balance < 0)	$balance_debits += $balance;

			$rows[] = array(
				array('data' => $row['user'], 'class' => array($balance > 0 ? '' : 'cashbox_debit')),
			        array('data' => variable_get('cashbox_symbol', '$') . ' ' . number_format($balance, 2, variable_get('cashbox_decimal', '.'), variable_get('cashbox_thousand', ',')), 'class' => array($balance > 0 ? '' : 'cashbox_debit')),
			);
		}
	       $rows[] = array(array('data' => '<hr />', 'colspan' => 2));
	       $rows[] = array(
		       array('data' => t('Total Assets'), 'class' => $balance_credits >= 0 ? 'cashbox_credit' : 'cashbox_debit'),
		       array('data' => _cashbox_format_amount($balance_credits), 'class' => $balance_credits >= 0 ? 'cashbox_credit' : 'cashbox_debit')
	       );
	       $rows[] = array(
		       array('data' => t('Total Receivables'), 'class' => $balance_debits >= 0 ? 'cashbox_credit' : 'cashbox_debit'),
		       array('data' => _cashbox_format_amount($balance_debits), 'class' => $balance_debits >= 0 ? 'cashbox_credit' : 'cashbox_debit')
	       );
	       $rows[] = array(
		       array('data' => t('Total Balance'), 'header' => true), 
		       array('data' => _cashbox_format_amount($balance_debits + $balance_credits), 'header' => true),
	       );
	       

		die(theme('table', array(
			'header'	=> array(t('Name'), t('Balance')),
			'empty'		=> t('No transactions available'),
			'rows'		=> $rows,
			'sticky'	=> true,
			'caption'	=> t('Balance Overview'))));	
	       
	       }
	else if (is_numeric($arg) && $arg == 0)
		return;
	else if (is_numeric($arg) && $arg != 0 && module_exists('cb_master')) {
		$account = new cbMaster($arg);
	}
	else if (!is_numeric($arg)) {
		$account->name = $arg;
	} else
		return;

	_cashbox_user_display_callback($account);
}

/** 
 * Get current user-balance
 *
 * @param uid
 * 	Valid User-Name
 */
function _cashbox_get_current_balance($user) {
	$result = db_query("(SELECT balance_creditee AS balance, timestamp FROM {cashbox} WHERE credited = :user ORDER BY timestamp DESC) " .
		"UNION (SELECT balance_debitee AS balance, timestamp FROM {cashbox} WHERE debited = :user  ORDER BY timestamp DESC)" .
	       " ORDER BY timestamp DESC LIMIT 1", array(':user' => $user));
	return (float)$result->fetchField();

}

/**
  * user-alter:
  * Regenerate checksums after a username has been changed
  * (implements hook_user_update)
  */
function cashbox_user_update(&$edit, $account, $category) {
	/** We're only interested in user-name changes, so pass up on everything else **/
	if ($category != 'account' || strcmp($edit['name'], $edit['original']->name) == 0)
		return;

	$affected = db_update('cashbox')->fields(array('credited' => $edit['name']))->condition('credited', $edit['original']->name)->execute();
	$affected += db_update('cashbox')->fields(array('debited' => $edit['name']))->condition('debited', $edit['original']->name)->execute();

	/** If the user made no transactions so far: screw it! */
	if ($affected == 0)
		return;

	$results = db_select('cashbox', 'c')->fields('c', array('tid'))->condition(db_or()->condition('credited', $edit['name'])->condition('debited', $edit['name']))->execute();
	$batch_op = array();

	/** Fill up the batch_op array for rebuilding the checksums **/
	while ($foo = $results->fetchAssoc())
		$batch_op[] =  array('_cashbox_rebuild_checksum', array($foo['tid']));

	 batch_set(array(
		 'title' => t('Rebuilding Transaction-Checksums'),
		 'progress_message' => t('Rebuilding Transaction-Checksums @current / @total'),
		 'operations' => $batch_op,
		 ));
	}
